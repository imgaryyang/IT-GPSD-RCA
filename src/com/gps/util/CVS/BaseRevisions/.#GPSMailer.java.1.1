/**<pre> 
 *==========================================================================
 *
 * Copyright: (C) IBM Corporation 2013 -- IBM Internal Use Only
 *
 *==========================================================================
 *
 *    FILE: GPSMailer.java
 *    CREATOR:Waqar Malik
 *    DEPT: GBS PAK
 *    DATE: 04/10/2013
 *
 *-PURPOSE-----------------------------------------------------------------
 *
 *--------------------------------------------------------------------------
 *
 *
 *-CHANGE LOG--------------------------------------------------------------
 * 04/10/2013Waqar Malik Initial coding.
 *==========================================================================
 * </pre> */
package com.gps.util;

import org.apache.commons.collections.CollectionUtils;
import org.apache.log4j.Logger;
import org.springframework.mail.MailSender;
import org.springframework.mail.javamail.MimeMessageHelper;
import org.springframework.stereotype.Service;

import javax.mail.MessagingException;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.MimeMessage;
import java.util.List;
import java.util.Properties;

/**
 * This class is used to send email messages.
 *
 * @authorWaqar Malik
 */
@Service
public class GPSMailer {
    private static Logger log = Logger.getLogger(GPSMailer.class);

    private MailSender mailSender;
    private final String DEFAULT_ENCODING = "UTF-8";





    public void sendEmail(String from, String subject, String body, List<String> recipients, List<String> ccList) throws MessagingException {
        try {
            Properties properties = System.getProperties();
            // Setup mail server
            properties.setProperty("mail.smtp.host", Constants.SMPT_ADDRESS);

            // Get the default Session object.
            Session session = Session.getDefaultInstance(properties);

            MimeMessage message = new MimeMessage(session);

            MimeMessageHelper helper = new MimeMessageHelper(message, DEFAULT_ENCODING);
            helper.setFrom(from);
            helper.setSubject(subject);
            helper.setText(body, true);
            helper.setPriority(1);
            // addReplyTo(helper, email.getReplyTo());
            addRecipients(helper, recipients);
            addCarbonCopys(helper, ccList);
            // addBlindCarbonCopys(helper, email.getBlindCarbonCopys());;

            // Send message
            Transport.send(message);
            log.info("Sent message successfully....");
        } catch (MessagingException mex) {
            log.info("error occured while sending emaul....");
            log.error(mex.getMessage(), mex);
        }
    }

    private void addRecipients(MimeMessageHelper helper, List<String> recipients) throws MessagingException {
        for (String rec : recipients) {
            if (org.apache.commons.lang.StringUtils.isNotBlank(rec)) {
                helper.addTo(rec);
            }
        }
    }

    private void addCarbonCopys(MimeMessageHelper helper, List<String> carbonCopys) throws MessagingException {
        if (CollectionUtils.isNotEmpty(carbonCopys)) {
            for (String carbonCopy : carbonCopys) {
                if (org.apache.commons.lang.StringUtils.isNotBlank(carbonCopy)) {
                    helper.addCc(carbonCopy);
                }
            }
        }
    }


    /**
     * @return the mailSender
     */
    public MailSender getMailSender() {
        return mailSender;
    }

    /**
     * @param mailSender the mailSender to set
     */
    public void setMailSender(MailSender mailSender) {
        this.mailSender = mailSender;
    }

}
